name: CI/CD - Microservicio Node.js en Docker y despliegue a EC2

# Este flujo ejecuta pruebas, construye una imagen Docker y la despliega en EC2.

on:
    push:
        branches: ["main"] # Se ejecuta cada vez que hay un push a la rama main
    pull_request:
        branches: ["main"] # También al crear o actualizar un PR hacia main

env:
    IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice # Nombre completo de la imagen Docker
    APP_PORT: ${{ secrets.APP_PORT || 3000 }} # Puerto por defecto si no hay secreto configurado

jobs:
    ci: # Primer job: integración continua
        name: Integración continua (build y test)
        runs-on: ubuntu-latest # Usa una máquina virtual de Ubuntu

        defaults:
            run:
                working-directory: app # Define el directorio donde correrán los comandos npm

        steps:
            - name: Obtener código
              uses: actions/checkout@v4 # Clona el repositorio

            - name: Configurar Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18 # Instala Node.js v18

            - name: Instalar dependencias
              run: npm install # Instala las dependencias del proyecto

            - name: Ejecutar pruebas
              run: npm test # Lanza los tests definidos en package.json

            - name: Construir imagen Docker
              run: |
                  # Se crea la imagen local usando el Dockerfile dentro de app/
                  docker build -t $IMAGE_NAME:latest .

            - name: Iniciar sesión en Docker Hub
              run: |
                  # Usa las credenciales almacenadas en Secrets
                  echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            - name: Publicar imagen (latest)
              run: docker push $IMAGE_NAME:latest # Sube la imagen a Docker Hub

    cd: # Segundo job: entrega continua (despliegue en EC2)
        name: Entrega y despliegue en EC2
        runs-on: ubuntu-latest
        needs: [ci] # Este job depende de que el job CI termine correctamente

        steps:
            - name: Instalar cliente SSH
              run: sudo apt-get update && sudo apt-get install -y openssh-client # Instala herramientas SSH en el runner

            - name: Configurar llave SSH
              run: |
                  # Crea la carpeta .ssh y guarda la llave privada desde Secrets
                  mkdir -p ~/.ssh
                  echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa  # Da permisos seguros a la llave
                  # Agrega el host EC2 a la lista de hosts conocidos (para evitar confirmación manual)
                  ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

            - name: Desplegar contenedor en EC2
              env:
                  HOST: ${{ secrets.EC2_HOST }} # IP pública de la instancia EC2
                  USER: ${{ secrets.EC2_USER }} # Usuario remoto (ec2-user)
                  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice:latest # Imagen publicada
                  PORT: ${{ env.APP_PORT }} # Puerto de la app
              run: |
                  # Se conecta al servidor remoto vía SSH y ejecuta comandos dentro del EC2
                  ssh -o StrictHostKeyChecking=yes $USER@$HOST << 'EOF'
                  set -euxo pipefail  # Modo estricto: muestra errores y detiene el script si falla algo
                  sudo systemctl start docker  # Asegura que Docker esté en ejecución
                  docker network inspect appnet >/dev/null 2>&1 || docker network create appnet  # Crea red si no existe
                  docker ps -q --filter "name=demo-microservice" | grep -q . && docker stop demo-microservice || true  # Detiene contenedor anterior
                  docker ps -aq --filter "name=demo-microservice" | grep -q . && docker rm demo-microservice || true  # Elimina contenedor anterior
                  docker pull $IMAGE  # Descarga la última versión de la imagen desde Docker Hub
                  docker run -d --name demo-microservice \
                    --restart unless-stopped \
                    --network appnet \
                    -p 80:3000 \
                    $IMAGE  # Ejecuta el contenedor en segundo plano
                  EOF
